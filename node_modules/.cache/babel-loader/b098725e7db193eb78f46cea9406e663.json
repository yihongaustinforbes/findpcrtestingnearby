{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sunny/development/bubbleteaGoogleMap/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sunny/development/bubbleteaGoogleMap/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/sunny/development/bubbleteaGoogleMap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sunny/development/bubbleteaGoogleMap/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sunny/development/bubbleteaGoogleMap/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sunny/development/bubbleteaGoogleMap/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sunny/development/bubbleteaGoogleMap/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/sunny/development/bubbleteaGoogleMap/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/sunny/development/bubbleteaGoogleMap/src/components/AddressArea/AddressArea.js\";\nimport React from 'react';\nimport './addressarea.css';\nimport * as clinicData from \"../../data/gongcha-location.json\";\n\nvar AddressArea = /*#__PURE__*/function (_React$Component) {\n  _inherits(AddressArea, _React$Component);\n\n  function AddressArea(props) {\n    var _this;\n\n    _classCallCheck(this, AddressArea);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddressArea).call(this, props));\n    _this.state = {\n      postcode: '',\n      prefecture: '',\n      city: '',\n      area: '',\n      street: '',\n      lineTwo: '',\n      latitude: '',\n      longtitude: '',\n      setMarker: props.setMarker\n    };\n    _this.setPostcode = _this.setPostcode.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.searchByPostcode = _this.searchByPostcode.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AddressArea, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"setPostcode\",\n    value: function setPostcode(event) {\n      this.setState({\n        postcode: event.target.value\n      });\n    }\n  }, {\n    key: \"searchByPostcode\",\n    value: function searchByPostcode(postcode) {\n      var _this2 = this;\n\n      var a = '';\n      var b = '';\n      var c = '';\n\n      var postal_code = require('japan-postal-code');\n\n      postal_code.get(postcode, function (address) {\n        console.log(address.prefecture); // => \"東京都\"\n\n        a = address.prefecture;\n        console.log(address.city); // => \"千代田区\"\n\n        b = address.city;\n        console.log(address.area); // => \"千代田\"\n\n        c = address.area;\n        console.log(address.street); // => \"\"\n      });\n      setTimeout(function () {\n        _this2.setState({\n          prefecture: a,\n          city: b,\n          area: c\n        });\n      }, 500);\n    }\n  }, {\n    key: \"handleSearch\",\n    value: function () {\n      var _handleSearch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var address, nearstClinic, latlngArray;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                //validation\n                address = this.state.prefecture.concat(this.state.city).concat(this.state.area).concat(this.state.street).concat(this.state.lineTwo);\n                _context.next = 3;\n                return this.validation(address);\n\n              case 3:\n                nearstClinic = _context.sent;\n                latlngArray = nearstClinic.coordinates.split(','); //setMarker here\n\n                this.state.setMarker({\n                  lat: Number(latlngArray[0]),\n                  lng: Number(latlngArray[1])\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleSearch() {\n        return _handleSearch.apply(this, arguments);\n      }\n\n      return handleSearch;\n    }()\n  }, {\n    key: \"validation\",\n    value: function () {\n      var _validation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n        var location, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getCordinates(address);\n\n              case 2:\n                location = _context2.sent;\n                console.log('the location returned by function' + location);\n                _context2.next = 6;\n                return this.findNearstSpot(location.lat(), location.lng());\n\n              case 6:\n                result = _context2.sent;\n                //if the address is not correct then print error\n                //   console.log(\"the first item in this array is \" + JSON.stringify(result))\n                console.log(\"the first item in this array is \" + result[0].coordinates + result[0].name);\n                return _context2.abrupt(\"return\", result[0]);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function validation(_x) {\n        return _validation.apply(this, arguments);\n      }\n\n      return validation;\n    }()\n  }, {\n    key: \"getCordinates\",\n    value: function () {\n      var _getCordinates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(address) {\n        var location, geocoder;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                location = '';\n                geocoder = new window.google.maps.Geocoder();\n                _context3.next = 4;\n                return geocoder.geocode({\n                  'address': address\n                }, function (results, status) {\n                  if (status == 'OK') {\n                    //   map.setCenter(results[0].geometry.location);\n                    //   var marker = new window.google.maps.Marker({\n                    //       map: map,\n                    //       position: results[0].geometry.location\n                    //   });\n                    console.log(\"location\" + results[0].geometry.location);\n                    console.log(\"address\" + address);\n                    location = results[0].geometry.location;\n                  } else {\n                    //   alert('Geocode was not successful for the following reason: ' + address);\n                    alert('the address entered is not avialuble.' + address);\n                    console.log(\"the address above is not avialuble.\");\n                  }\n                });\n\n              case 4:\n                return _context3.abrupt(\"return\", location);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getCordinates(_x2) {\n        return _getCordinates.apply(this, arguments);\n      }\n\n      return getCordinates;\n    }()\n  }, {\n    key: \"findNearstSpot\",\n    value: function () {\n      var _findNearstSpot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(lat, lng) {\n        var _Array$prototype;\n\n        var coords, origin, destinations, stores, coordinates, destinations_p, names, service, getDistanceMatrix, p_results, p_process, nextSet, lastIndex, max_records, p_stores, flatArray, total_records, g, _nextSet, newDes, h;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                coords = {\n                  lat: lat,\n                  lng: lng\n                }; //   console.log(\"coords:\"+(JSON.parse(clinicData)).NAME);\n\n                origin = new window.google.maps.LatLng(lat, lng);\n                destinations = [];\n                stores = [];\n                coordinates = [];\n                destinations_p = [];\n                names = []; // Build parallel arrays for the store IDs and destinations\n\n                _context5.next = 9;\n                return Promise.all(clinicData.features.map( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(store) {\n                    var storeNum, storeLoc;\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            storeNum = store.NAME;\n                            storeLoc = store.LOCATION; // console.log('storeCor is'+ [storeCor.lat(),storeCor.lng()]);\n\n                            // console.log('storeCor is'+ [storeCor.lat(),storeCor.lng()]);\n                            destinations_p.push(storeLoc);\n                            stores.push(storeNum); //    coordinates.push(coordinate);\n\n                            //    coordinates.push(coordinate);\n                            console.log('destinations_p is ' + destinations_p);\n\n                          case 5:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  }));\n\n                  return function (_x5) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()));\n\n              case 9:\n                destinations.push(destinations_p, stores);\n                console.log(\"destinations:\" + destinations); // Retrieve the distances of each store from the origin\n                // The returned list will be in the same order as the destinations list\n\n                service = new window.google.maps.DistanceMatrixService(); // console.log(service);\n\n                getDistanceMatrix = function getDistanceMatrix(service, parameters) {\n                  return new Promise(function (resolve, reject) {\n                    service.getDistanceMatrix(parameters, function (response, status) {\n                      if (status != window.google.maps.DistanceMatrixStatus.OK) {\n                        reject(response);\n                      } else {\n                        var distances = [];\n                        var results = response.rows[0].elements; //console.log(response);\n\n                        for (var j = 0; j < results.length; j++) {\n                          var element = results[j]; //console.log(element);\n\n                          var distanceText = element.status != 'ZERO_RESULTS' ? element.distance.text : '9999999999 km';\n                          var distanceVal = element.status != 'ZERO_RESULTS' ? element.distance.value : '9999999999 km';\n                          var distanceObject = {\n                            coordinates: destinations_p[j],\n                            name: stores[j],\n                            distanceText: distanceText,\n                            distanceVal: distanceVal\n                          };\n                          distances.push(distanceObject);\n                        }\n\n                        resolve(distances);\n                      }\n                    });\n                  });\n                };\n                /***********************************************************************************\n                This method was build to pass only 25 destinations in array to distance matrix \n                service , that's the max it was take at a time , if there is change to this \n                settings in google then only chnage max_records value below and it should work\n                ************************************************************************************/\n\n\n                p_results = [];\n                p_process = [];\n                nextSet = [];\n                lastIndex = 0;\n                max_records = 25;\n                p_stores = [];\n                flatArray = [];\n                total_records = Math.ceil(destinations[0].length / max_records); // later i figured out that foreach does not work with async function however FOR loop works\n\n                /*  data.forEach((store) => {\n                  let p_val = store.getGeometry().get().lat()+\",\"+store.getGeometry().get().lng();\n                  p_results.push(\"[\"+p_val+\"]\");\n                    });\n                */\n\n                g = 1;\n\n              case 22:\n                if (!(g <= total_records)) {\n                  _context5.next = 39;\n                  break;\n                }\n\n                _nextSet = [];\n                /*************************************************************\n                These debugging could be use to match what we are sending \n                matching with destination and storeid'd in parallel array\n                console.log(destinations[0].slice(lastIndex, max_records));\n                console.log(destinations[1].slice(lastIndex, max_records));\n                *************************************************************/\n\n                newDes = destinations[0].slice(lastIndex, max_records);\n                console.log(destinations[0].slice(lastIndex, max_records));\n                console.log(destinations[1].slice(lastIndex, max_records));\n\n                _nextSet.push(destinations[0].slice(lastIndex, max_records));\n\n                console.log(\"nextset:\" + newDes);\n                lastIndex = max_records;\n                max_records = lastIndex + 25;\n                /*********************************************************************************************\n                There is some issue going on with hawaii lats and lng - This is Test for that these are hawaii\n                lat,lng , I have opened Ticket with google : https://issuetracker.google.com/u/2/issues/189164319\n                   \n                   p_process.push(await getDistanceMatrix(service, {\n                      origins: ['21.304247103770592,-157.8504303328067'],\n                      destinations: ['19.638878300603324,-155.9901696156307','19.666046167473695,-155.99401485525755','19.517828633585925,-155.92144357145344','19.927879613527526,-155.78726601617393','21.304247103770592,-157.8504303328067'],\n                      travelMode: 'DRIVING',\n                      unitSystem: google.maps.UnitSystem.METRIC,\n                    }));\n                \n                *********************************************************************************************/\n                //    p_process.push(await getDistanceMatrix(service, {\n                //        origins: ['21.304247103770592,-157.8504303328067'],\n                //        destinations: nextSet[0],\n                //        travelMode: 'DRIVING',\n                //        unitSystem: window.google.maps.UnitSystem.METRIC,\n                //    }));\n\n                _context5.t0 = p_process;\n                _context5.next = 34;\n                return getDistanceMatrix(service, {\n                  origins: [origin],\n                  destinations: newDes,\n                  travelMode: 'DRIVING',\n                  unitSystem: window.google.maps.UnitSystem.METRIC\n                });\n\n              case 34:\n                _context5.t1 = _context5.sent;\n\n                _context5.t0.push.call(_context5.t0, _context5.t1);\n\n              case 36:\n                g++;\n                _context5.next = 22;\n                break;\n\n              case 39:\n                ; // end for loop\n\n                /**********************************************************\n                So i get back array results from getDistance matrix and now\n                they are nice stacked in 3,4,5 etc # of array depends on how\n                many set of 25's where passed , now to process further more\n                we need to merge all these array togather and stamp back \n                storeID - if you get 'undefined' error that means somehow \n                there is mismatch between array and loop count .\n                **********************************************************/\n\n                flatArray = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, p_process);\n                console.log(\"flatArray\" + flatArray.length);\n\n                for (h = 0; h < flatArray.length; h++) {\n                  flatArray[h].storeid = h; // reassigning storeid\n                }\n\n                ; // finally sorting array's\n\n                flatArray.sort(function (first, second) {\n                  return first.distanceVal - second.distanceVal;\n                });\n                return _context5.abrupt(\"return\", flatArray);\n\n              case 46:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function findNearstSpot(_x3, _x4) {\n        return _findNearstSpot.apply(this, arguments);\n      }\n\n      return findNearstSpot;\n    }()\n  }, {\n    key: \"callback\",\n    // end function\n    value: function callback(response, status) {\n      if (status == 'OK') {\n        var origins = response.originAddresses;\n        var destinations = response.destinationAddresses;\n        var nearestDis = \"20000\";\n        var neareastDes = \"\";\n        var index = null;\n        var geocoder = new window.google.maps.Geocoder();\n\n        for (var i = 0; i < origins.length; i++) {\n          var results = response.rows[i].elements;\n\n          for (var j = 0; j < results.length; j++) {\n            var element = results[j];\n            var distance = element.distance.value;\n\n            if (nearestDis >= distance) {\n              nearestDis = distance;\n              neareastDes = destinations[j];\n              index = j;\n            }\n\n            var duration = element.duration.text;\n            var from = origins[i];\n            var to = destinations[j];\n          }\n        }\n\n        console.log(\"nearestDis is \" + nearestDis);\n        geocoder.geocode({\n          \"address\": neareastDes\n        }, function (results) {\n          sessionStorage.setItem(\"closest-index\", index);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          fontSize: \"20px\",\n          fontWeight: \"700\",\n          margin: \"10px auto\",\n          width: \"500px\",\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 15\n        }\n      }, \"Find Your Nearest PCR Testing Facility!!!\"), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"lookup_field\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"context\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"idpc-input\",\n        placeholder: \"Search your postcode\",\n        \"aria-label\": \"Search a postcode to retrieve your address\",\n        onChange: this.setPostcode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"idpc-button\",\n        onClick: function onClick() {\n          return _this3.searchByPostcode(_this3.state.postcode);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }\n      }, \"Find my Address\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"idpc-select-container\",\n        \"aria-live\": \"polite\",\n        style: {\n          display: \"none\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"idpc-error\",\n        role: \"alert\",\n        style: {\n          display: \"none\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"addressContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 15\n        }\n      }, \"prefecture\"), /*#__PURE__*/React.createElement(\"input\", {\n        id: \"first_line\",\n        type: \"text\",\n        value: this.state.prefecture,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            prefecture: event.target.value\n          });\n        },\n        placeholder: \"eg.\\u6771\\u4EAC\\u90FD\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 10\n        }\n      }, \"city\"), /*#__PURE__*/React.createElement(\"input\", {\n        id: \"second_line\",\n        type: \"text\",\n        value: this.state.city,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            city: event.target.value\n          });\n        },\n        placeholder: \"eg.\\u5343\\u4EE3\\u533A\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 10\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 10\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 10\n        }\n      }, \"area\"), /*#__PURE__*/React.createElement(\"input\", {\n        id: \"third_line\",\n        type: \"text\",\n        value: this.state.area,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            area: event.target.value\n          });\n        },\n        placeholder: \"eg.\\u5343\\u4EE3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 9\n        }\n      }, \"Address Line One\"), /*#__PURE__*/React.createElement(\"input\", {\n        id: \"post_town\",\n        type: \"text\",\n        value: this.state.street,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            street: event.target.value\n          });\n        },\n        placeholder: \"eg.\\uFF11\\u756A\\u76EE\\u30FC\\uFF12\\u30FC\\uFF13\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 9\n        }\n      }, \"Address Line Two\"), /*#__PURE__*/React.createElement(\"input\", {\n        id: \"postcode\",\n        type: \"text\",\n        value: this.state.lineTwo,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            lineTwo: event.target.value\n          });\n        },\n        placeholder: \"eg.\\u30E9\\u30A4\\u30AA\\u30F3\\u30DE\\u30F3\\u30B7\\u30E7\\u30F3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 9\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"buttonWrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"search\",\n        value: \"\",\n        onClick: function onClick() {\n          return _this3.handleSearch();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 9\n        }\n      }, \"Find the nearest spot\"))));\n    }\n  }]);\n\n  return AddressArea;\n}(React.Component);\n\nexport { AddressArea as default };","map":{"version":3,"sources":["/Users/sunny/development/bubbleteaGoogleMap/src/components/AddressArea/AddressArea.js"],"names":["React","clinicData","AddressArea","props","state","postcode","prefecture","city","area","street","lineTwo","latitude","longtitude","setMarker","setPostcode","bind","searchByPostcode","event","setState","target","value","a","b","c","postal_code","require","get","address","console","log","setTimeout","concat","validation","nearstClinic","latlngArray","coordinates","split","lat","Number","lng","getCordinates","location","findNearstSpot","result","name","geocoder","window","google","maps","Geocoder","geocode","results","status","geometry","alert","coords","origin","LatLng","destinations","stores","destinations_p","names","Promise","all","features","map","store","storeNum","NAME","storeLoc","LOCATION","push","service","DistanceMatrixService","getDistanceMatrix","parameters","resolve","reject","response","DistanceMatrixStatus","OK","distances","rows","elements","j","length","element","distanceText","distance","text","distanceVal","distanceObject","p_results","p_process","nextSet","lastIndex","max_records","p_stores","flatArray","total_records","Math","ceil","g","newDes","slice","origins","travelMode","unitSystem","UnitSystem","METRIC","Array","prototype","h","storeid","sort","first","second","originAddresses","destinationAddresses","nearestDis","neareastDes","index","i","duration","from","to","sessionStorage","setItem","fontSize","fontWeight","margin","width","textAlign","display","handleSearch","Component"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,mBAAP;AACA,OAAO,KAAKC,UAAZ,MAA4B,kCAA5B;;IAEqBC,W;;;AACjB,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,qFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,UAAU,EAAE,EAFD;AAGXC,MAAAA,IAAI,EAAE,EAHK;AAIXC,MAAAA,IAAI,EAAE,EAJK;AAKXC,MAAAA,MAAM,EAAE,EALG;AAMXC,MAAAA,OAAO,EAAE,EANE;AAOXC,MAAAA,QAAQ,EAAE,EAPC;AAQXC,MAAAA,UAAU,EAAE,EARD;AASXC,MAAAA,SAAS,EAAEV,KAAK,CAACU;AATN,KAAb;AAWA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,uDAAnB;AACA,UAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,uDAAxB;AAde;AAehB;;;;wCACmB,CAEnB;;;gCACWE,K,EAAM;AACd,WAAKC,QAAL,CAAc;AAACb,QAAAA,QAAQ,EAAEY,KAAK,CAACE,MAAN,CAAaC;AAAxB,OAAd;AACH;;;qCACgBf,Q,EAAS;AAAA;;AACxB,UAAIgB,CAAC,GAAE,EAAP;AACA,UAAIC,CAAC,GAAC,EAAN;AACA,UAAIC,CAAC,GAAC,EAAN;;AACA,UAAIC,WAAW,GAAGC,OAAO,CAAC,mBAAD,CAAzB;;AACCD,MAAAA,WAAW,CAACE,GAAZ,CAAgBrB,QAAhB,EAA0B,UAASsB,OAAT,EAAkB;AACzCC,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACrB,UAApB,EADyC,CACR;;AACjCe,QAAAA,CAAC,GAACM,OAAO,CAACrB,UAAV;AACAsB,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACpB,IAApB,EAHyC,CAGd;;AAC3Be,QAAAA,CAAC,GAACK,OAAO,CAACpB,IAAV;AACAqB,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACnB,IAApB,EALyC,CAKd;;AAC3Be,QAAAA,CAAC,GAACI,OAAO,CAACnB,IAAV;AACAoB,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAAClB,MAApB,EAPyC,CAOZ;AAE9B,OATF;AAUCqB,MAAAA,UAAU,CAAC,YAAI;AAAC,QAAA,MAAI,CAACZ,QAAL,CAAc;AAC1BZ,UAAAA,UAAU,EAACe,CADe;AAE1Bd,UAAAA,IAAI,EAAEe,CAFoB;AAG1Bd,UAAAA,IAAI,EAAEe;AAHoB,SAAd;AAIf,OAJS,EAKT,GALS,CAAV;AAMH;;;;;;;;;;AAEG;AACMI,gBAAAA,O,GAAU,KAAKvB,KAAL,CAAWE,UAAX,CAAsByB,MAAtB,CAA6B,KAAK3B,KAAL,CAAWG,IAAxC,EAA8CwB,MAA9C,CAAqD,KAAK3B,KAAL,CAAWI,IAAhE,EAAsEuB,MAAtE,CAA6E,KAAK3B,KAAL,CAAWK,MAAxF,EAAgGsB,MAAhG,CAAuG,KAAK3B,KAAL,CAAWM,OAAlH,C;;uBACS,KAAKsB,UAAL,CAAgBL,OAAhB,C;;;AAArBM,gBAAAA,Y;AACAC,gBAAAA,W,GAAcD,YAAY,CAACE,WAAb,CAAyBC,KAAzB,CAA+B,GAA/B,C,EAClB;;AACA,qBAAKhC,KAAL,CAAWS,SAAX,CAAqB;AAACwB,kBAAAA,GAAG,EAAEC,MAAM,CAACJ,WAAW,CAAC,CAAD,CAAZ,CAAZ;AAA8BK,kBAAAA,GAAG,EAAED,MAAM,CAACJ,WAAW,CAAC,CAAD,CAAZ;AAAzC,iBAArB;;;;;;;;;;;;;;;;;;;mGAGaP,O;;;;;;;uBAGM,KAAKa,aAAL,CAAmBb,OAAnB,C;;;AAAjBc,gBAAAA,Q;AACJb,gBAAAA,OAAO,CAACC,GAAR,CAAY,sCAAoCY,QAAhD;;uBACsB,KAAKC,cAAL,CAAoBD,QAAQ,CAACJ,GAAT,EAApB,EAAmCI,QAAQ,CAACF,GAAT,EAAnC,C;;;AAAhBI,gBAAAA,M;AACJ;AACF;AACEf,gBAAAA,OAAO,CAACC,GAAR,CAAY,qCAAqCc,MAAM,CAAC,CAAD,CAAN,CAAUR,WAA/C,GAA6DQ,MAAM,CAAC,CAAD,CAAN,CAAUC,IAAnF;kDACKD,MAAM,CAAC,CAAD,C;;;;;;;;;;;;;;;;;;;sGAEIhB,O;;;;;;AACbc,gBAAAA,Q,GAAW,E;AACXI,gBAAAA,Q,GAAW,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,QAAvB,E;;uBACTJ,QAAQ,CAACK,OAAT,CAAkB;AAAE,6BAAWvB;AAAb,iBAAlB,EAAyC,UAASwB,OAAT,EAAkBC,MAAlB,EAA0B;AAErE,sBAAIA,MAAM,IAAI,IAAd,EAAoB;AACpB;AACA;AACA;AACA;AACA;AACExB,oBAAAA,OAAO,CAACC,GAAR,CAAY,aAAasB,OAAO,CAAC,CAAD,CAAP,CAAWE,QAAX,CAAoBZ,QAA7C;AACAb,oBAAAA,OAAO,CAACC,GAAR,CAAY,YAAYF,OAAxB;AACAc,oBAAAA,QAAQ,GAAGU,OAAO,CAAC,CAAD,CAAP,CAAWE,QAAX,CAAoBZ,QAA/B;AAED,mBAVD,MAUO;AACP;AACAa,oBAAAA,KAAK,CAAC,0CAA0C3B,OAA3C,CAAL;AACEC,oBAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACD;AACF,iBAjBG,C;;;kDAkBGY,Q;;;;;;;;;;;;;;;;;;;uGAKUJ,G,EAAIE,G;;;;;;;;;AACjBgB,gBAAAA,M,GAAU;AAAElB,kBAAAA,GAAG,EAACA,GAAN;AAAWE,kBAAAA,GAAG,EAACA;AAAf,iB,EAChB;;AACOiB,gBAAAA,M,GAAS,IAAIV,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBS,MAAvB,CAA8BpB,GAA9B,EAAmCE,GAAnC,C;AACPmB,gBAAAA,Y,GAAe,E;AACfC,gBAAAA,M,GAAS,E;AACTxB,gBAAAA,W,GAAc,E;AACdyB,gBAAAA,c,GAAiB,E;AACjBC,gBAAAA,K,GAAQ,E,EACd;;;uBACMC,OAAO,CAACC,GAAR,CAAY9D,UAAU,CAAC+D,QAAX,CAAoBC,GAApB;AAAA,sFAAwB,kBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAChCC,4BAAAA,QADgC,GACrBD,KAAK,CAACE,IADe;AAEhCC,4BAAAA,QAFgC,GAErBH,KAAK,CAACI,QAFe,EAGtC;;AAAA;AACAV,4BAAAA,cAAc,CAACW,IAAf,CAAoBF,QAApB;AACAV,4BAAAA,MAAM,CAACY,IAAP,CAAYJ,QAAZ,EALsC,CAMzC;;AAAA;AACGvC,4BAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuB+B,cAAnC;;AAPsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAxB;;AAAA;AAAA;AAAA;AAAA,oBAAZ,C;;;AASPF,gBAAAA,YAAY,CAACa,IAAb,CAAkBX,cAAlB,EAAkCD,MAAlC;AACE/B,gBAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkB6B,YAA9B,E,CAID;AACJ;;AACMc,gBAAAA,O,GAAU,IAAI1B,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmByB,qBAAvB,E,EAChB;;AACMC,gBAAAA,iB,GACF,SADEA,iBACF,CAACF,OAAD,EAAUG,UAAV;AAAA,yBAAyB,IAAIb,OAAJ,CAAY,UAACc,OAAD,EAAUC,MAAV,EAAqB;AACtDL,oBAAAA,OAAO,CAACE,iBAAR,CAA0BC,UAA1B,EAAsC,UAACG,QAAD,EAAW1B,MAAX,EAAsB;AACxD,0BAAIA,MAAM,IAAIN,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB+B,oBAAnB,CAAwCC,EAAtD,EAA0D;AACtDH,wBAAAA,MAAM,CAACC,QAAD,CAAN;AACH,uBAFD,MAEO;AACH,4BAAMG,SAAS,GAAG,EAAlB;AACA,4BAAM9B,OAAO,GAAG2B,QAAQ,CAACI,IAAT,CAAc,CAAd,EAAiBC,QAAjC,CAFG,CAGH;;AACA,6BAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjC,OAAO,CAACkC,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,8BAAME,OAAO,GAAGnC,OAAO,CAACiC,CAAD,CAAvB,CADqC,CAErC;;AACA,8BAAMG,YAAY,GAAID,OAAO,CAAClC,MAAR,IAAkB,cAAnB,GAAqCkC,OAAO,CAACE,QAAR,CAAiBC,IAAtD,GAA6D,eAAlF;AACA,8BAAMC,WAAW,GAAIJ,OAAO,CAAClC,MAAR,IAAkB,cAAnB,GAAqCkC,OAAO,CAACE,QAAR,CAAiBpE,KAAtD,GAA8D,eAAlF;AACA,8BAAMuE,cAAc,GAAG;AACnBxD,4BAAAA,WAAW,EAAEyB,cAAc,CAACwB,CAAD,CADR;AAEnBxC,4BAAAA,IAAI,EAAEe,MAAM,CAACyB,CAAD,CAFO;AAGnBG,4BAAAA,YAAY,EAAEA,YAHK;AAInBG,4BAAAA,WAAW,EAAEA;AAJM,2BAAvB;AAMAT,0BAAAA,SAAS,CAACV,IAAV,CAAeoB,cAAf;AACH;;AAEDf,wBAAAA,OAAO,CAACK,SAAD,CAAP;AACH;AACJ,qBAvBD;AAwBH,mBAzBwB,CAAzB;AAAA,iB;AA4BJ;AACP;AACA;AACA;AACA;;;AACWW,gBAAAA,S,GAAY,E;AACZC,gBAAAA,S,GAAY,E;AACZC,gBAAAA,O,GAAU,E;AACVC,gBAAAA,S,GAAY,C;AACZC,gBAAAA,W,GAAc,E;AACdC,gBAAAA,Q,GAAW,E;AACXC,gBAAAA,S,GAAY,E;AACZC,gBAAAA,a,GAAgBC,IAAI,CAACC,IAAL,CAAU3C,YAAY,CAAC,CAAD,CAAZ,CAAgB2B,MAAhB,GAAyBW,WAAnC,C,EAGpB;;AAEA;AACP;AACA;AACA;AACA;;AAGgBM,gBAAAA,C,GAAI,C;;;sBAAGA,CAAC,IAAIH,a;;;;;AAEbL,gBAAAA,Q,GAAU,E;AAEd;AACX;AACA;AACA;AACA;AACA;;AACeS,gBAAAA,M,GAAS7C,YAAY,CAAC,CAAD,CAAZ,CAAgB8C,KAAhB,CAAsBT,SAAtB,EAAiCC,WAAjC,C;AAEdpE,gBAAAA,OAAO,CAACC,GAAR,CAAY6B,YAAY,CAAC,CAAD,CAAZ,CAAgB8C,KAAhB,CAAsBT,SAAtB,EAAiCC,WAAjC,CAAZ;AACApE,gBAAAA,OAAO,CAACC,GAAR,CAAY6B,YAAY,CAAC,CAAD,CAAZ,CAAgB8C,KAAhB,CAAsBT,SAAtB,EAAiCC,WAAjC,CAAZ;;AACCF,gBAAAA,QAAO,CAACvB,IAAR,CAAab,YAAY,CAAC,CAAD,CAAZ,CAAgB8C,KAAhB,CAAsBT,SAAtB,EAAiCC,WAAjC,CAAb;;AACApE,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAW0E,MAAvB;AACAR,gBAAAA,SAAS,GAAGC,WAAZ;AACAA,gBAAAA,WAAW,GAAGD,SAAS,GAAG,EAA1B;AAEA;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEQ;AACA;AACA;AACA;AACA;AACA;;+BACAF,S;;uBAAqBnB,iBAAiB,CAACF,OAAD,EAAU;AAC5CiC,kBAAAA,OAAO,EAAE,CAACjD,MAAD,CADmC;AAE5CE,kBAAAA,YAAY,EAAE6C,MAF8B;AAG5CG,kBAAAA,UAAU,EAAE,SAHgC;AAI5CC,kBAAAA,UAAU,EAAE7D,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB4D,UAAnB,CAA8BC;AAJE,iBAAV,C;;;;;6BAA5BtC,I;;;AAtCyB+B,gBAAAA,CAAC,E;;;;;AA6CpC,iB,CAAE;;AACH;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAIGJ,gBAAAA,SAAS,GAAG,oBAAAY,KAAK,CAACC,SAAN,EAAgBhF,MAAhB,yBAA0B8D,SAA1B,CAAZ;AACAjE,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAYqE,SAAS,CAACb,MAAlC;;AACA,qBAAS2B,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGd,SAAS,CAACb,MAA9B,EAAsC2B,CAAC,EAAvC,EAA2C;AAEvCd,kBAAAA,SAAS,CAACc,CAAD,CAAT,CAAaC,OAAb,GAAuBD,CAAvB,CAFuC,CAEb;AAE7B;;AAAA,iB,CAGD;;AACAd,gBAAAA,SAAS,CAACgB,IAAV,CAAe,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC9B,yBAAOD,KAAK,CAACzB,WAAN,GAAoB0B,MAAM,CAAC1B,WAAlC;AACH,iBAFD;kDAKOQ,S;;;;;;;;;;;;;;;;;;AAEP;6BAWUpB,Q,EAAU1B,M,EAAQ;AACvB,UAAIA,MAAM,IAAI,IAAd,EAAoB;AAClB,YAAIqD,OAAO,GAAG3B,QAAQ,CAACuC,eAAvB;AACA,YAAI3D,YAAY,GAAGoB,QAAQ,CAACwC,oBAA5B;AACA,YAAIC,UAAU,GAAG,OAAjB;AACA,YAAIC,WAAW,GAAG,EAAlB;AACA,YAAIC,KAAK,GAAG,IAAZ;AACA,YAAI5E,QAAQ,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,QAAvB,EAAf;;AACA,aAAK,IAAIyE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,OAAO,CAACpB,MAA5B,EAAoCqC,CAAC,EAArC,EAAyC;AACvC,cAAIvE,OAAO,GAAG2B,QAAQ,CAACI,IAAT,CAAcwC,CAAd,EAAiBvC,QAA/B;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjC,OAAO,CAACkC,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,gBAAIE,OAAO,GAAGnC,OAAO,CAACiC,CAAD,CAArB;AACA,gBAAII,QAAQ,GAAGF,OAAO,CAACE,QAAR,CAAiBpE,KAAhC;;AACA,gBAAGmG,UAAU,IAAK/B,QAAlB,EAA2B;AACzB+B,cAAAA,UAAU,GAAG/B,QAAb;AACAgC,cAAAA,WAAW,GAAG9D,YAAY,CAAC0B,CAAD,CAA1B;AACAqC,cAAAA,KAAK,GAAGrC,CAAR;AACD;;AAED,gBAAIuC,QAAQ,GAAGrC,OAAO,CAACqC,QAAR,CAAiBlC,IAAhC;AACA,gBAAImC,IAAI,GAAGnB,OAAO,CAACiB,CAAD,CAAlB;AACA,gBAAIG,EAAE,GAAGnE,YAAY,CAAC0B,CAAD,CAArB;AACD;AACF;;AACDxD,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmB0F,UAA/B;AACA1E,QAAAA,QAAQ,CAACK,OAAT,CAAiB;AACf,qBAAWsE;AADI,SAAjB,EAEC,UAASrE,OAAT,EAAkB;AACjB2E,UAAAA,cAAc,CAACC,OAAf,CAAuB,eAAvB,EAAwCN,KAAxC;AACH,SAJC;AAKD;AACJ;;;6BACS;AAAA;;AACN,0BACI,uDACA;AAAK,QAAA,KAAK,EAAE;AAAEO,UAAAA,QAAQ,EAAE,MAAZ;AAAoBC,UAAAA,UAAU,EAAE,KAAhC;AAAwCC,UAAAA,MAAM,EAAC,WAA/C;AAA4DC,UAAAA,KAAK,EAAC,OAAlE;AAA2EC,UAAAA,SAAS,EAAC;AAArF,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDADF,eAGE;AAAK,QAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACN;AAAK,QAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,SAAS,EAAC,YAFZ;AAGE,QAAA,WAAW,EAAC,sBAHd;AAIE,sBAAW,4CAJb;AAKE,QAAA,QAAQ,EAAE,KAAKtH,WALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,eAUE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,aAAhC;AAA8C,QAAA,OAAO,EAAG;AAAA,iBAAM,MAAI,CAACE,gBAAL,CAAsB,MAAI,CAACZ,KAAL,CAAWC,QAAjC,CAAN;AAAA,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAVF,eAWE;AACE,QAAA,SAAS,EAAC,uBADZ;AAEE,qBAAU,QAFZ;AAGE,QAAA,KAAK,EAAE;AAACgI,UAAAA,OAAO;AAAR,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,eAiBE;AAAG,QAAA,SAAS,EAAC,YAAb;AAA0B,QAAA,IAAI,EAAC,OAA/B;AAAuC,QAAA,KAAK,EAAE;AAACA,UAAAA,OAAO;AAAR,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjBF,CADM,CAHF,eAuBJ;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAO,QAAA,EAAE,EAAC,YAAV;AAAuB,QAAA,IAAI,EAAC,MAA5B;AAAmC,QAAA,KAAK,EAAE,KAAKjI,KAAL,CAAWE,UAArD;AAAiE,QAAA,QAAQ,EAAE,kBAACW,KAAD;AAAA,iBAAW,MAAI,CAACC,QAAL,CAAc;AAACZ,YAAAA,UAAU,EAAEW,KAAK,CAACE,MAAN,CAAaC;AAA1B,WAAd,CAAX;AAAA,SAA3E;AAAuI,QAAA,WAAW,EAAC,uBAAnJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADJ,eAKI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADG,eAEH;AAAO,QAAA,EAAE,EAAC,aAAV;AAAwB,QAAA,IAAI,EAAC,MAA7B;AAAoC,QAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWG,IAAtD;AAA4D,QAAA,QAAQ,EAAE,kBAACU,KAAD;AAAA,iBAAW,MAAI,CAACC,QAAL,CAAc;AAACX,YAAAA,IAAI,EAAEU,KAAK,CAACE,MAAN,CAAaC;AAApB,WAAd,CAAX;AAAA,SAAtE;AAA4H,QAAA,WAAW,EAAC,uBAAxI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFG,CALJ,eASC;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAED;AAAO,QAAA,EAAE,EAAC,YAAV;AAAuB,QAAA,IAAI,EAAC,MAA5B;AAAmC,QAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWI,IAArD;AAA2D,QAAA,QAAQ,EAAE,kBAACS,KAAD;AAAA,iBAAW,MAAI,CAACC,QAAL,CAAc;AAACV,YAAAA,IAAI,EAAES,KAAK,CAACE,MAAN,CAAaC;AAApB,WAAd,CAAX;AAAA,SAArE;AAA2H,QAAA,WAAW,EAAC,iBAAvI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFC,CATD,eAaA;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADA,eAEA;AAAO,QAAA,EAAE,EAAC,WAAV;AAAsB,QAAA,IAAI,EAAC,MAA3B;AAAkC,QAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWK,MAApD;AAA4D,QAAA,QAAQ,EAAE,kBAACQ,KAAD;AAAA,iBAAW,MAAI,CAACC,QAAL,CAAc;AAACT,YAAAA,MAAM,EAAEQ,KAAK,CAACE,MAAN,CAAaC;AAAtB,WAAd,CAAX;AAAA,SAAtE;AAA8H,QAAA,WAAW,EAAC,+CAA1I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,CAbA,eAiBA;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADA,eAEA;AAAO,QAAA,EAAE,EAAC,UAAV;AAAqB,QAAA,IAAI,EAAC,MAA1B;AAAiC,QAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWM,OAAnD;AAA4D,QAAA,QAAQ,EAAE,kBAACO,KAAD;AAAA,iBAAW,MAAI,CAACC,QAAL,CAAc;AAACR,YAAAA,OAAO,EAAEO,KAAK,CAACE,MAAN,CAAaC;AAAvB,WAAd,CAAX;AAAA,SAAtE;AAA+H,QAAA,WAAW,EAAC,2DAA3I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,CAjBA,CAvBI,eA6CJ;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEA;AAAQ,QAAA,SAAS,EAAC,QAAlB;AAA2B,QAAA,KAAK,EAAC,EAAjC;AAAoC,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACkH,YAAL,EAAN;AAAA,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAFA,CA7CI,CADA,CADJ;AAuDL;;;;EAzVsCtI,KAAK,CAACuI,S;;SAA1BrI,W","sourcesContent":["import React from 'react';\nimport './addressarea.css';\nimport * as clinicData from \"../../data/gongcha-location.json\";\n\nexport default class AddressArea extends React.Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n          postcode: '',\n          prefecture: '',\n          city: '',\n          area: '',\n          street: '',\n          lineTwo: '',\n          latitude: '',\n          longtitude: '',\n          setMarker: props.setMarker\n        }\n        this.setPostcode = this.setPostcode.bind(this);\n        this.searchByPostcode = this.searchByPostcode.bind(this);\n      }\n      componentDidMount() {\n    \n      }\n      setPostcode(event){\n          this.setState({postcode: event.target.value})\n      }\n      searchByPostcode(postcode){\n        let a= '';\n        let b='';\n        let c='';\n        var postal_code = require('japan-postal-code');\n         postal_code.get(postcode, function(address) {\n            console.log(address.prefecture); // => \"東京都\"\n            a=address.prefecture;\n            console.log(address.city); // => \"千代田区\"\n            b=address.city;\n            console.log(address.area); // => \"千代田\"\n            c=address.area;\n            console.log(address.street); // => \"\"\n         \n          });\n          setTimeout(()=>{this.setState({\n              prefecture:a,\n              city: b,\n              area: c\n        })}\n          ,500);\n      }\n      async handleSearch() {\n          //validation\n          const address = this.state.prefecture.concat(this.state.city).concat(this.state.area).concat(this.state.street).concat(this.state.lineTwo)\n          var nearstClinic = await this.validation(address);\n          var latlngArray = nearstClinic.coordinates.split(',');\n          //setMarker here\n          this.state.setMarker({lat: Number(latlngArray[0]), lng: Number(latlngArray[1]) });\n \n      }\n      async validation(address) {\n        \n        // var address = '〒104-8560 東京都中央区明石町９−１';\n        var location =　await this.getCordinates(address);\n        console.log('the location returned by function'+location)\n          let result =  await this.findNearstSpot(location.lat(),location.lng());\n          //if the address is not correct then print error\n        //   console.log(\"the first item in this array is \" + JSON.stringify(result))\n          console.log(\"the first item in this array is \" + result[0].coordinates + result[0].name);\n        return result[0];\n      }\n     async getCordinates(address) {\n        var location = '';\n        var geocoder = new window.google.maps.Geocoder();\n        await geocoder.geocode( { 'address': address}, function(results, status) {\n            \n            if (status == 'OK') {\n            //   map.setCenter(results[0].geometry.location);\n            //   var marker = new window.google.maps.Marker({\n            //       map: map,\n            //       position: results[0].geometry.location\n            //   });\n              console.log(\"location\" + results[0].geometry.location);\n              console.log(\"address\" + address);\n              location = results[0].geometry.location;\n              \n            } else {\n            //   alert('Geocode was not successful for the following reason: ' + address);\n            alert('the address entered is not avialuble.' + address);\n              console.log(\"the address above is not avialuble.\")\n            }\n          });\n          return location;\n\n      }\n\n\n      async findNearstSpot(lat,lng){\n          var coords =  { lat:lat, lng:lng};\n        //   console.log(\"coords:\"+(JSON.parse(clinicData)).NAME);\n           var origin = new window.google.maps.LatLng(lat, lng);\n           const destinations = [];\n           const stores = [];\n           const coordinates = [];\n           const destinations_p = [];\n           const names = [];\n           // Build parallel arrays for the store IDs and destinations\n           await Promise.all(clinicData.features.map(async (store) => {\n               const storeNum = store.NAME;\n               const storeLoc = store.LOCATION;\n               // console.log('storeCor is'+ [storeCor.lat(),storeCor.lng()]);\n               destinations_p.push(storeLoc);\n               stores.push(storeNum);\n            //    coordinates.push(coordinate);\n               console.log('destinations_p is ' + destinations_p);\n           }));\n          destinations.push(destinations_p, stores);\n            console.log(\"destinations:\" + destinations);\n            \n           \n           \n           // Retrieve the distances of each store from the origin\n       // The returned list will be in the same order as the destinations list\n       const service = new window.google.maps.DistanceMatrixService();\n       // console.log(service);\n       const getDistanceMatrix =\n           (service, parameters) => new Promise((resolve, reject) => {\n               service.getDistanceMatrix(parameters, (response, status) => {\n                   if (status != window.google.maps.DistanceMatrixStatus.OK) {\n                       reject(response);\n                   } else {\n                       const distances = [];\n                       const results = response.rows[0].elements;\n                       //console.log(response);\n                       for (let j = 0; j < results.length; j++) {\n                           const element = results[j];\n                           //console.log(element);\n                           const distanceText = (element.status != 'ZERO_RESULTS') ? element.distance.text : '9999999999 km';\n                           const distanceVal = (element.status != 'ZERO_RESULTS') ? element.distance.value : '9999999999 km';\n                           const distanceObject = {\n                               coordinates: destinations_p[j],\n                               name: stores[j],\n                               distanceText: distanceText,\n                               distanceVal: distanceVal,\n                           };\n                           distances.push(distanceObject);\n                       }\n   \n                       resolve(distances);\n                   }\n               });\n           });\n   \n   \n       /***********************************************************************************\n       This method was build to pass only 25 destinations in array to distance matrix \n       service , that's the max it was take at a time , if there is change to this \n       settings in google then only chnage max_records value below and it should work\n       ************************************************************************************/\n       let p_results = [];\n       let p_process = [];\n       let nextSet = [];\n       var lastIndex = 0\n       var max_records = 25;\n       var p_stores = [];\n       var flatArray = [];\n       var total_records = Math.ceil(destinations[0].length / max_records);\n   \n   \n       // later i figured out that foreach does not work with async function however FOR loop works\n   \n       /*  data.forEach((store) => {\n         let p_val = store.getGeometry().get().lat()+\",\"+store.getGeometry().get().lng();\n         p_results.push(\"[\"+p_val+\"]\");\n           });\n       */\n   \n   \n       for (var g = 1; g <= total_records; g++) {\n   \n           let nextSet = [];\n   \n           /*************************************************************\n           These debugging could be use to match what we are sending \n           matching with destination and storeid'd in parallel array\n           console.log(destinations[0].slice(lastIndex, max_records));\n           console.log(destinations[1].slice(lastIndex, max_records));\n           *************************************************************/\n         const newDes = destinations[0].slice(lastIndex, max_records)\n          \n          console.log(destinations[0].slice(lastIndex, max_records));\n          console.log(destinations[1].slice(lastIndex, max_records));\n           nextSet.push(destinations[0].slice(lastIndex, max_records));\n           console.log(\"nextset:\"+newDes);\n           lastIndex = max_records;\n           max_records = lastIndex + 25;\n   \n           /*********************************************************************************************\n           There is some issue going on with hawaii lats and lng - This is Test for that these are hawaii\n           lat,lng , I have opened Ticket with google : https://issuetracker.google.com/u/2/issues/189164319\n              \n              p_process.push(await getDistanceMatrix(service, {\n                 origins: ['21.304247103770592,-157.8504303328067'],\n                 destinations: ['19.638878300603324,-155.9901696156307','19.666046167473695,-155.99401485525755','19.517828633585925,-155.92144357145344','19.927879613527526,-155.78726601617393','21.304247103770592,-157.8504303328067'],\n                 travelMode: 'DRIVING',\n                 unitSystem: google.maps.UnitSystem.METRIC,\n               }));\n           \n           *********************************************************************************************/\n   \n        //    p_process.push(await getDistanceMatrix(service, {\n        //        origins: ['21.304247103770592,-157.8504303328067'],\n        //        destinations: nextSet[0],\n        //        travelMode: 'DRIVING',\n        //        unitSystem: window.google.maps.UnitSystem.METRIC,\n        //    }));\n        p_process.push(await getDistanceMatrix(service, {\n            origins: [origin],\n            destinations: newDes,\n            travelMode: 'DRIVING',\n            unitSystem: window.google.maps.UnitSystem.METRIC,\n          }));\n   \n       }; // end for loop\n       /**********************************************************\n    So i get back array results from getDistance matrix and now\n    they are nice stacked in 3,4,5 etc # of array depends on how\n    many set of 25's where passed , now to process further more\n    we need to merge all these array togather and stamp back \n    storeID - if you get 'undefined' error that means somehow \n    there is mismatch between array and loop count .\n    **********************************************************/\n\n\n\n   flatArray = Array.prototype.concat(...p_process);\n   console.log(\"flatArray\"+flatArray.length)\n   for (var h = 0; h < flatArray.length; h++) {\n       \n       flatArray[h].storeid = h; // reassigning storeid\n\n   };\n\n\n   // finally sorting array's\n   flatArray.sort((first, second) => {\n       return first.distanceVal - second.distanceVal;\n   });\n\n\n   return flatArray;\n\n}; // end function\n   \n\n\n\n\n        \n\n \n\n\n    callback(response, status) {\n        if (status == 'OK') {\n          var origins = response.originAddresses;\n          var destinations = response.destinationAddresses;\n          var nearestDis = \"20000\";\n          var neareastDes = \"\";\n          var index = null;\n          var geocoder = new window.google.maps.Geocoder();\n          for (var i = 0; i < origins.length; i++) {\n            var results = response.rows[i].elements;\n            for (var j = 0; j < results.length; j++) {\n              var element = results[j];\n              var distance = element.distance.value;\n              if(nearestDis >=  distance){\n                nearestDis = distance;\n                neareastDes = destinations[j];   \n                index = j;   \n              }\n              \n              var duration = element.duration.text;\n              var from = origins[i];\n              var to = destinations[j];\n            }\n          }\n          console.log(\"nearestDis is \" + nearestDis);\n          geocoder.geocode({\n            \"address\": neareastDes\n        }, function(results) {\n            sessionStorage.setItem(\"closest-index\", index);\n        }); \n        } \n    }\n      render(){\n        return (\n            <>\n            <div style={{ fontSize: \"20px\", fontWeight: \"700\",  margin:\"10px auto\", width:\"500px\", textAlign:\"center\"}}>\n              <h1>Find Your Nearest PCR Testing Facility!!!</h1>\n            \n              <div id=\"lookup_field\">\n        <div id=\"context\">\n          \n          <input\n            type=\"text\"\n            className=\"idpc-input\"\n            placeholder=\"Search your postcode\"\n            aria-label=\"Search a postcode to retrieve your address\"\n            onChange={this.setPostcode}\n          />\n        \n          <button type=\"button\" className=\"idpc-button\" onClick={ () => this.searchByPostcode(this.state.postcode) }>Find my Address</button>\n          <div\n            className=\"idpc-select-container\"\n            aria-live=\"polite\"\n            style={{display: `none`}}\n          ></div>\n          {/* Any messages displayed here */}\n          <p className=\"idpc-error\" role=\"alert\" style={{display: `none`}}></p>\n        </div></div>\n        <div className='addressContainer'>\n            <div className='row'>\n              <label>prefecture</label>\n              <input id=\"first_line\" type=\"text\" value={this.state.prefecture} onChange={(event) => this.setState({prefecture: event.target.value})} placeholder='eg.東京都'/>\n            </div>\n            <div className='row'>\n         <label>city</label>\n         <input id=\"second_line\" type=\"text\" value={this.state.city}　onChange={(event) => this.setState({city: event.target.value})} placeholder='eg.千代区'/>\n         </div>\n         <div className='row'>\n         <label>area</label>\n        <input id=\"third_line\" type=\"text\" value={this.state.area}　onChange={(event) => this.setState({area: event.target.value})} placeholder='eg.千代'/>\n        </div>\n        <div className='row'>\n        <label>Address Line One</label>\n        <input id=\"post_town\" type=\"text\" value={this.state.street}　onChange={(event) => this.setState({street: event.target.value})} placeholder='eg.１番目ー２ー３'/>\n        </div>\n        <div className='row'>\n        <label>Address Line Two</label>\n        <input id=\"postcode\" type=\"text\"　value={this.state.lineTwo} onChange={(event) => this.setState({lineTwo: event.target.value})} placeholder='eg.ライオンマンション'/>\n        </div>\n        </div>\n        <div className='buttonWrapper'>\n        \n        <button className=\"search\" value='' onClick={() => this.handleSearch()}>Find the nearest spot</button>\n        </div>\n        </div>\n  </>\n        )\n\n  }  \n}"]},"metadata":{},"sourceType":"module"}